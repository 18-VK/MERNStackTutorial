JavaScript async/await
-------------------------
"async and await make promises easier to write"
async makes a function return a Promise
await makes a function wait for a Promise

link - https://www.programiz.com/javascript/async-await
     - https://www.freecodecamp.org/news/javascript-async-await/
     - https://w3schools.com/js/js_async.asp
The async keyword
------------------
We use the async keyword with a function to represent that the function is an asynchronous function. The async function returns a 
promise.
The syntax of async function is:
async function name(parameter1, parameter2, ...paramaterN) {
    // statements
}
Example: 
    async function myFunction() {
    return "Hello";
    }
    Is the same as:

    function myFunction() {
    return Promise.resolve("Hello");
    }
The await keyword
------------------
The await keyword is used inside the async function to wait for the asynchronous operation.
The syntax to use await is:
let result = await promise;

The resolved value of the promise is treated as the return value of the await expression.
means, we donâ€™t use await then we will get Promise as return value but if we use await then we will get resolved value or rejected value
of that promise.

The fetch API method
---------------------
Note:- Its just basic of it.. will see in more detail later

The Fetch API provides a JavaScript interface for accessing and manipulating parts of the protocol,
such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to
fetch resources asynchronously across the network.

Unlike XMLHttpRequest that is a callback-based API, Fetch is promise-based and provides a better alternative 
that can be easily used in service workers.

syntax :

async function logMovies() {
 // it's a simple "get" request 
  const response = await fetch("http://example.com/movies.json");  // returns a promise object
  const movies = await response.json(); // get response data from response promise object
  console.log(movies);
}

// Example POST method implementation:
async function postData(url = "", data = {}) {
  // Default options are marked with *
  const response = await fetch(url, {
    method: "POST", // *GET, POST, PUT, DELETE, etc.
    mode: "cors", // no-cors, *cors, same-origin
    cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
    credentials: "same-origin", // include, *same-origin, omit
    headers: {
      "Content-Type": "application/json",
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    redirect: "follow", // manual, *follow, error
    referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    body: JSON.stringify(data), // body data type must match "Content-Type" header
  });
  return response.json(); // parses JSON response into native JavaScript objects
}

postData("https://example.com/answer", { answer: 42 }).then((data) => {
  console.log(data); // JSON data parsed by `data.json()` call
});

link - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch