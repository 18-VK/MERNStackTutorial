JS Data types
----------------

JavaScript is a dynamically typed (also called loosely typed) scripting language.
In JavaScript, variables can receive different data types over time.

JavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value
type, and any variable can be assigned (and re-assigned) values of all types:
JavaScript is also a weakly typed language, which means it allows implicit type conversion when an operation involves mismatched types,
instead of throwing type errors.

Primitive Data types
------------------------
> Number: JavaScript numbers are always stored in double-precision 64-bit binary format IEEE 754. Unlike other programming languages,
    you don’t need int, float, etc to declare different numeric values.
> String: JavaScript Strings are similar to sentences. They are made up of a list of characters, which is essentially just an 
    “array of characters, like “Hello GeeksforGeeks” etc.
> Boolean: Represent a logical entity and can have two values: true or false.
> Null: This type has only one value that is null.
> Undefined: A variable that has not been assigned a value is undefined.
> Symbol: Symbols return unique identifiers that can be used to add unique property keys to an object that won’t collide with
     keys of any other code that might add to the object.
> BigInt: BigInt is a built-in object in JavaScript that provides a way to represent whole numbers larger than 253-1.

Non-Primitive Data type
--------------------------

> Object: It is the most important data type and forms the building blocks for modern JavaScript. 
    We will learn about these data types in detail in further articles.

    Link - https://www.geeksforgeeks.org/javascript-data-types/
    link - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures



var, let and const
----------------------
In JavaScript, you can declare variables with the var, let, and const keywords

> var and let create variables that can be reassigned another value.
> const creates "constant" variables that cannot be reassigned another value.
> developers shouldn't use var anymore. They should use let or const instead.
> if you're not going to change the value of a variable, it is good practice to use const.

var vs let vs const – What's the Difference?
---------------------------------------------
To analyze the differences between these keywords, I'll be using three factors:

> Scope of variables
> Redeclaration and reassignment
> Hoisting - In JavaScript, a variable can be declared after it has been used. In other words, a variable can be used before 
             it has been declared.

link - https://www.freecodecamp.org/news/differences-between-var-let-const-javascript/

var
-----
scope :- Variables declared with var can have a global or local scope. Global scope is for variables declared outside functions, 
         while local scope is for variables declared inside functions.


Redeclaration and reassignment :- Variables declared with var can be redeclared and reassigned.

Hoisting :- Variables declared with var are hoisted to the top of their global or local scope, which makes them accessible before the 
            line they are declared.Variables declared with var are hoisted to the top of their global or local scope,
            which makes them accessible before the line they are declared.

            Note :- var variables are hoisted with a default value of undefined


Extra 
--------
Block scope:- The block scope of a variable means that the variable is accessible within the block that is between the
curly braces.

    e.g :

        if(true)
        {
            var v1 =10;
            let v2=20;
            console.log(v1);
            console.log(v2); 
        }

        console.log(v1); // accessible here
        console.log(v2); // not accessible here

Note :- Variables declared with the var keyword can not have block scope. Variables declared inside a { } block 
        can be accessed from outside the block.


let
----

Scope :- Variables declared with let can have a global, local, or block scope.

Redeclaration and reassignment :- Just like var, variables declared with let can be reassigned to other values, 
                                  but they cannot be redeclared

Hoisting : - you try to access such variables, instead of getting undefined, or variable is not defined error, 
             you get cannot access variable before initialization

const
--------

scope :- const are similar to let in regards to scope. Such variables can have a global, local, or block scope.

Redeclaration and reassignment :- const is used for declaring constant variables – which are variables with values that cannot be changed. 
                                  So such variables cannot be redeclared, and neither can they be reassigned to other values.

Hoisting :- Accessing a variable declared with const before the line of declaration will throw a cannot access variable before initialization error.


Note :- The JS engine doesn't allow us to access the variables declared with let and const before they are declared. This is called Temporal Dead Zone.

        > let and const variables are hoisted too but they cannot be accessed before their declarations. This is called Temporal Dead Zone.

        link:- https://dev.to/anku/are-let-and-const-hoisted-4kbi


