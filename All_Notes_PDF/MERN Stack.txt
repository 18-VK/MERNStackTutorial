What is the MERN stack?    https://www.mongodb.com/mern-stack
---------------------------
MERN stands for MongoDB, Express, React, Node, after the four key technologies that make up the stack.

> MongoDB - document database
> Express(.js) - Node.js web framework
> React(.js) - a client-side JavaScript framework
> Node(.js) - the premier JavaScript web server


Roadmap to become a MERN Stack Developer
Step 1: Learn basics of HTML, CSS and JavaScript
Step 2: Learn React which is a frontend library for building User Interfaces
Step 3: Learn Node.js which is JavaScript runtime environment
Step 4: Learn Express.js, a framework built upon Node.js to simplify the process of creating web application and API building
Step 5: Learn MongoDB, a NoSQL database to store and retrieve data from database.

How does the MERN stack work?
-------------------------------
The MERN architecture allows you to easily construct a three-tier architecture (front end, back end, database) entirely using JavaScript and JSON.

        Architecture - https://webimages.mongodb.com/_com_assets/cms/mern-stack-b9q1kbudz0.png?ixlib=js-3.7.1&auto=format%2Ccompress&w=1946


React.js front end
--------------------
    The top tier of the MERN stack is React.js, the declarative JavaScript framework for creating dynamic client-side applications in HTML. 
    React lets you build up complex interfaces through simple components, connect them to data on your back-end server, and render them as HTML.

    Reactjs's strong suit is handling stateful, data-driven interfaces with minimal code and minimal pain, and 
    it has all the bells and whistles you'd expect from a modern web framework: great support for forms, error handling, events, lists, and more.

Express.js and Node.js server tier
------------------------------------
    The next level down is the Express.js server-side framework, running inside a Node.js server. Express.js bills itself as a "fast, unopinionated, minimalist web framework for Node.js,"
     and that is indeed exactly what it is. Express.js has powerful models for URL routing (matching an incoming URL with a server function), and handling HTTP requests and responses.

    By making XML HTTP Requests (XHRs) or GETs or POSTs from your React.js front end, you can connect to Express.js functions that power your application. 
    Those functions, in turn, use MongoDB's Node.js drivers, either via callbacks or using promises, to access and update data in your MongoDB database.

MongoDB database tier
---------------------------
    If your application stores any data (user profiles, content, comments, uploads, events, etc.), then you're going to want a database that's just as easy to work with as React, 
    Express and Node.

    That's where MongoDB comes in: JSON documents created in your React.js front end can be sent to the Express.js server, where they can be processed and (assuming they're valid) stored directly in MongoDB for later retrieval. Again, if you're building in the cloud, you'll want to look at Atlas. If you're looking to set up your own MERN stack, read on!
    
